'.text.html.php':
  'new class':
    'prefix': 'cl'
    'body': """
      class ${1:Class}${2:
          extends ${3:Parent}}${4:
          implements ${5:Interface}}
      {
          $0
      }
    """
  'new method':
    'prefix': 'me'
    'body': """
      ${1:public} function ${2:name}($3)${4: : ${5:void}}
      {
          $0
      }
    """
  'declare strict':
    'prefix': 'decl'
    'body': 'declare(strict_types=1);'
  'var_dump':
    'prefix': 'vd'
    'body': 'var_dump($0);'
  'var_dump + exit':
    'prefix': 'vde'
    'body': """
      var_dump($0);
      exit();
    """
  'PHPUnit Mock':
    'prefix': 'mocl'
    'body': """
      ${1:var} = \$this
          ->getMockBuilder(${2:Class}::class)
          ->disableOriginalConstructor()
          ->getMock();$0
    """
  'PHPUnit Mock with Pimple':
    'prefix': 'mopc'
    'body': """
      \$this->_pimple['${1:var}'] = \$this
          ->getMockBuilder(${2:Class}::class)
          ->disableOriginalConstructor()
          ->getMock();$0
    """
  'PHPUnit Mock Method':
    'prefix': 'mome'
    'body': """
      $1
          ->expects(\$this->${2:once()})
          ->method('${3:method}')${4:
          ->with(\$this->equalTo($5))}${6:
          ->will(\$this->returnValue($7))};$0
    """
  'PHPUnit Mock Method with Pimple':
    'prefix': 'mopm'
    'body': """
      \$this->_pimple['$1']
          ->expects(\$this->${2:once()})
          ->method('${3:method}')${4:
          ->with(\$this->equalTo($5))}${6:
          ->will(\$this->returnValue($7))};$0
    """
  'PHPUnit Test Class':
    'prefix': 'tecl'
    'body': """
      class ${1:Class}Test extends PHPUnit_Framework_TestCase
      {
          /**
           * @var ${1:Class}
           */
          private \$_object;

          public function setUp()
          {
              parent::setUp();

              \$this->_object = new ${1:Class}();
          }

          $0
      }
    """
  'PHPUnit Test Class with Pimple':
    'prefix': 'tepi'
    'body': """
      class ${1:Class}Test extends PHPUnit_Framework_TestCase
      {
          /**
           * @var ${1:Class}
           */
          private \$_object;

          /**
           * @var Pimple
           */
          private \$_pimple;

          public function setUp()
          {
              parent::setUp();

              \$this->_pimple = new Pimple();

              \$this->_object = new ${1:Class}(\$this->_pimple);
          }

          $0
      }
    """
  'PHPUnit Test Instance':
    'prefix': 'tein'
    'body': """
      public function testInstance()
      {
          \$this->assertInstanceOf(${1:Class}::class, \$this->_object);${2:
          \$this->assertInstanceOf(${3:Class}::class, \$this->_object);}
      }$0
    """
  'PHPUnit Test Constants':
    'prefix': 'teco'
    'body': """
      public function testConstants()
      {
          \$object = new ReflectionClass(\$this->_object);

          \$this->assertEquals(
              [
                  $0
              ],
              \$object->getConstants()
          );
      }
    """
  'PHPUnit Test Method':
    'prefix': 'teme'
    'body': """
      public function test$1()
      {
          $0
      }
    """
  'PHPUnit Test with DataProvider':
    'prefix': 'teda'
    'body': """
      /**
       * @dataProvider dataProviderForTest$1
       */
      public function test$1($2)
      {
          $0
      }

      public function dataProviderForTest$1()
      {
          return [
              [],
          ];
      }
    """

'.source.js':
  'Module':
    'prefix': 'mod'
    'body': """
      /** $1 */
      (
          function( $ ) {
              "use strict";

              var selectors = {
              };

              var dataNames = {
              };

              var states = {
              };

              activate();

              function activate() {
                  $.subscribe( "$1.$2", function() {
                      $0
                  } );
              }
          }
      )( jQuery );
    """
  'QUnit Test':
    'prefix': 'test'
    'body': """
      (
          function( $ ) {
              "use strict";

              QUnit.module( "$1", {
                  afterEach: function() {
                      $.test.afterEach();
                  }
              } );

              QUnit.test( "activate", function( assert ) {
                  assert.deepEqual( $.subscriptions, [ "$1.$2" ] );
                  assert.deepEqual( $.publishings, [] );
              } );

              QUnit.test( "$2", function( assert ) {
                  $.test.publish( "$1.$2" );

                  assert.deepEqual( $.publishings, [ ] );
              } );
          }
      )( jQuery );
    """

'.text.html.basic':
  'QUnit Test':
    'prefix': 'test'
    'body': """
      <!DOCTYPE html>
      <html>
          <head>
              <meta charset="utf-8">
              <meta name="viewport" content="width=device-width">
              <title>QUnit Unit Testing Framework for JavaScript</title>
              <link rel="stylesheet" href="http://code.jquery.com/qunit/qunit-2.1.1.css">
          </head>
          <body>
              <div id="qunit"></div>
              <div id="qunit-fixture">$0</div>

              <script src="http://code.jquery.com/qunit/qunit-2.2.1.js"></script>
              <script src="http://ajax.googleapis.com/ajax/libs/jquery/2.1.0/jquery.min.js"></script>
              <script src="http://code.jquery.com/ui/1.11.4/jquery-ui.min.js"></script>
              <script src="http://cdnjs.cloudflare.com/ajax/libs/js-cookie/2.1.3/js.cookie.min.js"></script>
              <script src="http://cdnjs.cloudflare.com/ajax/libs/jquery-mockjax/1.6.2/jquery.mockjax.min.js"></script>
              <script src="http://sinonjs.org/releases/sinon-5.0.3.js"></script>
              <script src="${1:../}../../../../public/javascript/modules/pub-sub.js"></script>
              <script src="${1:../}../../../../public/javascript/modules/lib/data.js"></script>
              <script src="${1:../}../../test-util.js"></script>

              <script src="${1:../}../../../../public/javascript/modules/${2:path/to/file}.js"></script>

              <script src="${3:test}.js"></script>
          </body>
      </html>

    """
